
E X A M P L E S
===============================================================================
for using kendapy from the command line

(I) FOR NEW BACY EXPERIMENTS (2020 and later) *********************************

REF_RUN=/hpc/uwork/fe12bacy/exp_lm/ILAM_REF_NEC
EXP_DIR1=/hpc/uwork/fe12bacy/exp_lm/ILAM_ONLINE_2019July/ICOND2_ONLINE_0403
EXP_DIR2=/hpc/uwork/fe12bacy/exp_lm/ILAM_ONLINE_2019July/ILAM_ONLINE_0803

# BACY_EXP.PY ................................................................

# show basic information
bacy_exp.py $REF_RUN
# -> e.g. "directory = ICOND2_ONLINE_0402, experiment id = 402, model = ICON-LAM, analyses at 20190629120000 -- 20190704000000"

# For longer experiments this may take a while because the full output file tree is scanned.
# If a directory (or a link to a directory) exists in your home directory that has the name ".bacy_exp_py_cache",
# a cache file will be generated there and read the next time one of the bacy_*py commands is used.
# If new files have been added to the experiment (e.g. because it is still running) use the --no-cache option
# (--> ignore existing cache file, rescan the file tree an writes a new cache file)

# show all experiment settings
bacy_exp.py --config $REF_RUN

# generate plot showing which files are present for which times
bacy_exp.py -f $REF_RUN

# BACY_OBS.PY ................................................................

# plot evolution of rmse, spread, bias, number of obs. for all active observations of one experiment in the given time range
bacy_obs.py --time-range 20190604060000,20190604180000 -E $REF_RUN

# plot evolution of rmse, spread, bias, number of obs. for all active observations of type AIREP in one experiment in a lat-lon-rectangle 
bacy_obs.py -E $REF_RUN -O AIREP -F "state=active area=LATLON:48,1,55,15_LATLONUNITS:DEG"

# compare rmse and bias evolution of active AIREP observations for two experiments (use only observations present that are active in both experiments)
bacy_obs.py -E -O AIREP -F "state=active area=LATLON:48,1,55,15_LATLONUNITS:DEG" -m rmse,bias,nobs --compare $EXP_DIR1 $EXP_DIR2

# compare rmse and bias evolution of RAD observations that are active in the first experiment and valid (active or passive) in the second experiment
bacy_obs.py -E -O RAD -F "state=active_first" -m rmse,bias,nobs --time-range 20190703080000,20190703160000 --compare $EXP_DIR1 $EXP_DIR2


# BACY_VISOP.PY ................................................................
# (will not work for experiments without assimilation of visible relfectances, like the reference run)

# plot reflectance for a single file in datools/seviri format
bacy_visop.py -f $EXP_DIR1/data/20190701120000/seviri_sim_201907011200_ens023.grb2

# plot all seviri files from the cycles in the specified time range (observation vs. deterministic run)
bacy_visop.py -e --time-range 20190703080000,20190703160000 $EXP_DIR1

# like above, but compare two experiments
bacy_visop.py -e --time-range 20190703080000,20190703160000 --compare $EXP_DIR1 $EXP_DIR2


# BACY_RADIATION.PY ...........................................................

# plot mean values and rmse for all forecasts (of one experiment) started in the specified time range
bacy_radiation.py --fcst-plots --time-range 20190703060000,20190703120000 --filter="state=report_active area=LATLON:47.3,1,55,15_LATLONUNITS:DEG" $EXP_DIR

# generate comparison plot with rmse and bias for all forecasts started at 12 UTC
bacy_radiation.py --compare --name CONV,VISCONV --start-hour 12 --filter="state=report_active area=LATLON:47.3,1,55,15_LATLONUNITS:DEG" $EXP_DIR1 $EXP_DIR2

# like previous example, but plot also mean values
bacy_radiation.py --compare --plot-mean-evo --name CONV,VISCONV --start-hour 12 --filter="state=report_active area=LATLON:47.3,1,55,15_LATLONUNITS:DEG" $EXP_DIR $EXP_DIR2



(II) FOR OLD BACY EXPERIMENTS (pre 2020) **************************************


(1) Show which files are available for an KENDA/BACY experiment................

~/python/kendapy/experiment.py <log file>

<log file> must contain the standard output generated by the run_cycle script.

[ If the experiment was run at DWD and copied to LMU, all the paths contained in
<log file> have to be converted. This is done automatically by experiment.py if
'cosmo_letkf' is both part of the log file path and of the DATA_DIR,
FEDDBACK_DIR... paths contained within the log file. ]

~/python/kendapy/experiment.py -v <log file>
shows additionally all the settings experiment.py obtained by parsing the log file.


(2) Create observation overview plots .........................................

~/python/kendapy/obs_overview.py <log file>
plots observation times, heights, latitudes, longitudes for active observations.
"-S passive" shows onyl passive, "-S valid" shows active and passive observations
Further filters for observation types, variables, time ranges: see "obs_overview.py --help"


(3) Plot error evolution for one experiment ...................................

Plot RMSE, bias, spread evolution for SYNOP observations:
~/python/kendapy/plot_experiment.py -E -O SYNOP <log file>
Also spread-skill and Desroziers plots are generated.


(4) Compare error evolution for several experiments ...........................

~/python/kendapy/plot_experiment.py -C -E -O SYNOP <log file 1> <log file 2>


(5) Compare relative difference in rmse .......................................

Plot the relative difference of the mean RMSE of experiments 2, 3, ... with
respect to experiment 1:

~/python/kendapy/plot_experiment.py -C -o <log file 1> <log file 2> <log file 3> ...


(6) Plot departure statistics .................................................

Plot first guess and analysis departure histograms for surface pressure SYNOP observations:
~/python/kendapy/plot_experiment.py -c -O SYNOP -V PS

Also histograms of the observed values and the model equivalents are plotted.

(7) Options available for most of the scripts .................................

-O <obstype1>[,<obstype2>]... restricts the observation type,
-V <varname1>[,<varname2>][,<varname3>]... the variable name.

For all plots the time range can be restriced using the -s and -e options, e.g.
~/python/kendapy/plot_experiment.py -c -V PS -s 20160605090000 -e 20160605120000 <log file>
uses only times between 9UTC and 12UTC on 2016 June 5 to compute the departure histograms.

--area-filter <area definition> restricts the area. E.g. "--area-filter LATLON:COSMO-DE-NOALPS"
is the COSMO-DE domain without the 0.75 degree margins on all sides and without the alps.
See area.py for more definitions...

--state-filter can restrict allowed observation states to active, passive and valid (=active+passive cases)
Complex rules of the form "--state-filter default:active,RAD:passive,SYNOP:valid" are also possible.
